# -*- coding: utf-8 -*-

import sjconf
import re

class Plugin(sjconf.PluginWithTemplate):

    VERSION = '@PACKAGE_VERSION@'

    SUBSECTION = [ 'source', 'target', 'push' ]

    class Error(sjconf.Plugin.Error):
        pass

    class SectionNameInvalid(Error):
        def __init__(self, type):
            self.msg = 'The section name "%s" does not match source or target or push' % (type)

    class MissingSectionError(Error):
        def __init__(self, section_name):
            self.msg = 'The section "%s" is missing in sjconf' % (section_name)

    class MissingOptionError(Error):
        def __init__(self, push_name, *missing_options):
            self.msg = 'The push section "%s" does not have the mandatory option(s) "%s"' % (push_name, '","'.join(missing_options))

    class ConfSection(sjconf.Conf.ConfSection):
        def __getitem__(self, key):
            if key == 'daemon':
                value = (self['daemon_bool'] and '#Â NoDaemon') or 'NoDaemon'
            else:
                value = sjconf.Conf.ConfSection.__getitem__(self, key)
            return value

    def conf_files_path(self):
        return (self.sjconf.etc_dir + '/sl2d.conf',)

    def dependencies(self):
        return (sjconf.Plugin.Dependency(self, 'ffserver', optional = False, requirements = {'>=' : '0.0.2', '<' : '1'}),)

    def services_to_restart(self):
        return ('stream_loader2',)

    def set_plugins(self, plugins):
        self.ffserver_plugin = plugins['ffserver']

    def file_content(self, file_path):

        content = ''

        # push should be defined even if empty
        if 'push' not in self.conf['sl2d']:
            raise Plugin.MissingSettingError('sl2d', 'push')

        # walk through push sections
        for name in self.conf['sl2d']['push'].split(','):
            norm_name = name.lstrip().rstrip()
            content += self._sl2d_push_section(norm_name, self.conf['sl2d:push:' + norm_name])

        return content

    def push_setting(self, section_name, setting):

        if section_name not in self.conf:
            raise Plugin.MissingSectionError(section_name)
        if setting not in self.conf[section_name]:
            raise Plugin.MissingOptionError(section_name, setting)
        return self.conf[section_name][setting]

    def _sl2d_push_section(self, name, section):

        section_name = 'sl2d:push:' + name
        content = '\n[%s]\n' % section_name

        # Convert and print mandatory url value
        for (conv, orig) in [('url-in', 'source'), ('url-out', 'target')]:
            setting = self.push_setting(section_name, orig)
            if setting.startswith("ffserver"):
                content += "%s = http://localhost:%s/%s\n" % (conv,
                    self.ffserver_plugin.conf['ffserver']['port'], setting.split(':')[2])
            else:
                content += "%s = %s\n" % (conv, self.push_setting(setting, 'url'))

            content += self._sl2d_extra_section(setting, section_name)

        for (key, value) in section.iteritems():
            if key in ['source', 'target']:
                continue

            content += "%s = %s\n" % (key, value)

        return content

    def _sl2d_extra_section(self, section_name, main_section):

        content = ''
        if section_name in self.conf:
            section = self.conf[section_name]
        elif section_name in self.ffserver_plugin.conf:
            section = self.ffserver_plugin.conf[section_name]
        else:
            raise Plugin.MissingSectionError(section_name)

        for (key,value) in section.iteritems():
            if key == 'url' or key in self.conf[main_section].keys():
                continue
            content += "%s = %s\n" % (key, value)

        return content
