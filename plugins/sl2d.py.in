# -*- coding: utf-8 -*-

import sjconf

class Plugin(sjconf.PluginWithTemplate):

    VERSION = '@PACKAGE_VERSION@'

    SUBSECTION = [ 'source', 'target', 'push' ]

    class Error(sjconf.Plugin.Error):
        pass

    class SettingValueInvalid(Error):
        def __init__(self, setting, section):
            self.msg = 'The setting "%s" in section "%s" does not match any valid value' % (setting, section)

    class SectionNameInvalid(Error):
        def __init__(self, section_name):
            self.msg = 'The section name "%s" does not match source or target or push' % (section_name)

    class MissingSectionError(Error):
        def __init__(self, section_name):
            self.msg = 'The section "%s" is missing in sjconf' % (section_name)

    class MissingOptionError(Error):
        def __init__(self, push_name, *missing_options):
            self.msg = 'The push section "%s" does not have the mandatory option(s) "%s"' % (push_name, '","'.join(missing_options))

    class ConfSection(sjconf.Conf.ConfSection):
        def __getitem__(self, key):
            if key == 'daemon':
                value = (self['daemon_bool'] and '# NoDaemon') or 'NoDaemon'
            else:
                value = sjconf.Conf.ConfSection.__getitem__(self, key)
            return value

    def conf_files_path(self):
        return (self.sjconf.etc_dir + '/sl2d.conf',)

    def dependencies(self):
        return (sjconf.Plugin.Dependency(self, 'ffserver', optional = False, requirements = {'>' : '0.0.2', '<' : '1'}),)

    def services_to_restart(self):
        return ('sl2d',)

    def set_plugins(self, plugins):
        self.ffserver_plugin   = plugins['ffserver']
        self.ffserver_sections = self.ffserver_plugin.interface_subsection_get_list()
        self.ffserver_address  = self.ffserver_plugin.interface_get_bind_address()
        self.ffserver_port     = self.ffserver_plugin.interface_get_port()

    def file_content(self, file_path):

        content = '[sl2d]\n'

        # some settings should always be defined
        for setting in ['push', 'main_loop_delay', 'respawn_min_delay']:
            if setting not in self.conf['sl2d']:
                raise Plugin.MissingOptionError('sl2d', setting)
            else:
                content += "%s = %s\n" % (setting, self.conf['sl2d'][setting])

        # walk through push sections
        for name in [name.strip() for name in self.conf['sl2d']['push'].split(',') if name.strip()]:
            content += self._sl2d_push_section(name, self.conf['sl2d:push:' + name])

        return content

    def push_setting(self, section_name, setting):

        if section_name not in self.conf:
            raise Plugin.MissingSectionError(section_name)
        if setting not in self.conf[section_name]:
            raise Plugin.MissingOptionError(section_name, setting)
        return self.conf[section_name][setting]

    def _sl2d_push_section(self, name, section):

        section_name = 'sl2d:push:' + name
        content = '\n[%s]\n' % section_name
        binary = self.push_setting(section_name, 'binary')
        transcode = self.push_setting(section_name, 'transcode')
        preset = self.push_setting(section_name, 'preset')

        if transcode != 'none' and transcode not in self.conf:
            raise Plugin.MissingSectionError(transcode)

        if preset != 'none' and preset not in self.conf:
            raise Plugin.MissingSectionError(preset)

        content += "binary = %s\n" % binary

        # Convert and print mandatory url value
        for (conv, orig) in [('url-in', 'source'), ('url-out', 'target')]:
            setting = self.push_setting(section_name, orig)
            if setting.startswith("ffserver"):
                # FIXME: the split is probably not the best way but it works for now.
                content += "%s = http://%s:%s/%s\n" % (conv,
                    self.ffserver_address,
                    self.ffserver_port,
                    setting.split(':')[2])
            else:
                content += "%s = %s\n" % (conv, self.push_setting(setting, 'url'))

        # Extract pre/post commands if any
        # FIXME: this is ugly but should be temporary
        try:
            i = 1
            while True:
                setting = self.push_setting(section_name, 'precommand-%d' % i)
                content += "%s = %s\n" % ('precommand-%d' % i, setting)
                i = i+1
        except Plugin.MissingOptionError:
            # No precommand, this is not fatal
            pass

        try:
            i = 1
            while True:
                setting = self.push_setting(section_name, 'postcommand-%d' % i)
                content += "%s = %s\n" % ('postcommand-%d' % i, setting)
                i = i+1
        except Plugin.MissingOptionError:
            # No postcommand, this is not fatal
            pass

        if transcode == 'none':
            content += "video_codec = copy\naudio_codec = copy\nvideo_copy_timestamps = yes\n"
            return content
        else:
            if preset != 'none':
                content += self._sl2d_extra_section('sl2d:preset:' + preset, [section_name, transcode])
            content += self._sl2d_extra_section(transcode, [section_name])

        # Get transcode parameters from the push section
        for (key, value) in section.iteritems():
            if key in ['source', 'target', 'transcode', 'binary'] or key.startswith('precommand') or key.startswith('postcommand'):
                continue

            content += "%s = %s\n" % (key, value)

        return content

    def _sl2d_extra_section(self, section_name, section_list):
        """ Print parameters which are not in sections listed elsewhere.

        @section_name: name of the section to print the parameters of.
        @section_list: list of sections whose parameters should not be
                       overwritten.
        """

        content = ''
        already_set_keys = []
        for section in section_list:
            already_set_keys.append(self.conf[section].keys())

        if section_name in self.conf:
            section = self.conf[section_name]
        elif section_name in self.ffserver_sections:
            section = self.ffserver_plugin.interface_subsection_get(section_name)
        else:
            raise Plugin.MissingSectionError(section_name)

        for (key, value) in section.iteritems():
            if key == 'url' or key in already_set_keys:
                continue
            elif key.startswith('precommand') or key.startswith('postcommand'):
                continue
            else:
                content += "%s = %s\n" % (key, value)

        return content
